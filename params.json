{"name":"Mock Twitter API Rate Limiter","tagline":"Mocks Twitter API's rate limit behaviour","body":"# Mock Twitter API Rate Limiter\r\n\r\nThis application mimics rate limit behaviour of Twitter API. Currently only search is supported.\r\n\r\n# Requirements\r\n\r\n- [Redis](http://redis.io/) for sessions\r\n\r\n# Installation\r\n\r\n``` bash\r\nnpm install\r\n```\r\n\r\n# Running\r\n\r\n```bash\r\nredis-server\r\nnode --harmony server.js\r\n```\r\n\r\n## An example request:\r\n\r\nYou need to pass a random oauthconsumer_key in Authorization header.\r\n\r\n```bash\r\ncurl --get 'http://localhost:3000/1.1/search/tweets.json' --data 'q=deniz' --header 'Authorization: OAuth oauth_consumer_key=\"SoMekEy\"'\r\n```\r\n\r\nResponse HTTP 200 (in limit)\r\n```\r\n{\r\n  \"query\": \"deniz\",\r\n  \"Authorization\": \"OAuth oauth_consumer_key=\\\"SoMekEy\\\"\",\r\n  \"responseHeaders\": {\r\n    \"X-Rate-Limit-Limit\": 450,\r\n    \"X-Rate-Limit-Remaining\": 449,\r\n    \"X-Rate-Limit-Reset\": 1396580129\r\n  }\r\n}\r\n```\r\n\r\nResponse headers are also set on HTTP response object as well.\r\n\r\nResponse HTTP 429 (exceeded limit)\r\n```\r\n{\r\n  \"errors\": [\r\n    {\r\n      \"code\": 88,\r\n      \"message\": \"Rate limit exceeded\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nResponse HTTP 400 (unauthorised)\r\n```\r\n{\r\n  \"errors\": [\r\n    {\r\n      \"message\": \"Bad Authentication data\",\r\n      \"code\": 215\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n# Contribution\r\n\r\nI needed to test only search endpoint with one app, so implemented only that. Feel free to create a pull request for other endpoints.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}